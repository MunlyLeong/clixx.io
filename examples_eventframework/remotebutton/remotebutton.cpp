/* Program

   A simple program created by the clixx.io generator now ready for 
   customisation.

*/

#include <stdio.h>
#include "clixxIO.hpp"
#include "remotebutton-config.hpp"

#define F_CPU 8000000UL
#include <util/delay.h>
#include <core_AVR/iohelp.h>

clixxIO_Button mybutton(BUTTON1_CONFIG);

char mybuff[30];

class App : public clixxIOApp{

  private:
        
    int buttonstate;

  public:

    void setup(){
        /* setup Event handler
         * 
         * This is a built in handler that will get called on startup
         * and provides for initialisation requirements.
         * 
         */
        buttonstate = 0;

        adcInit(ADC2);
        
        IoT.begin();

        Debug.puts("Application in setup event");

        IoT.beginPublishing("SmallDevice/Button");
    };

    void loop(){
        /* 
         * Loop Event handler - This gets called repeatedly.
         */
        /*
         * if (mybutton.pressed()){

            Debug.puts("Button Pressed");

            buttonstate = ~buttonstate;
            if (buttonstate){
                IoT.publish("On");
            } 
            else {
                IoT.publish("Off");
            }
        } else {
            
        }
        */

        char buffer[60];

        int x = adcRead(ADC2,0,1);
        if (x>250)
        {
            // IoT.publish("On");
            snprintf(buffer, sizeof(buffer), "On v=%d", x);

        } else {
            // IoT.publish("Off");
            snprintf(buffer, sizeof(buffer), "Off v=%d", x);
        }

        IoT.publish((const char *) &buffer);

        _delay_ms(333); 
    };

};

// Main program Section. Simply setup an App class and let it run
int main(){
 
  App m;

  return m.run();

}

// Autogenerated interface between the event interface and application class
#include "remotebutton-callbacks.cpp"
